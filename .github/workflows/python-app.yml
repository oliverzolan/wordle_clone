# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Wordle clone

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install coverage
    - name: Run tests
      run: |
        coverage run -m unittest discover tests
    - name: Generate coverage report
      run: |
        coverage report -m
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: .coverage
        fail_ci_if_error: false

  deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile run_game.py --name wordle

    - name: Rename binary for OS
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          mv dist/wordle.exe dist/wordle-windows.exe
        elif [ "${{ runner.os }}" = "macOS" ]; then
          mv dist/wordle dist/wordle-mac
        else
          mv dist/wordle dist/wordle-linux
        fi
      shell: bash

    - name: Create release (only once)
      if: matrix.os == 'macos-latest'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ runner.os == 'Windows' && 'dist/wordle-windows.exe' || (runner.os == 'macOS' && 'dist/wordle-mac' || 'dist/wordle-linux') }}
        asset_name: ${{ runner.os == 'Windows' && 'wordle-windows.exe' || (runner.os == 'macOS' && 'wordle-mac' || 'wordle-linux') }}
        asset_content_type: application/octet-stream
