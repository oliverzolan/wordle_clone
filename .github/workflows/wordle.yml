# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Wordle clone

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install coverage
    - name: Run tests
      run: coverage run -m unittest discover tests
    - name: Generate coverage report
      run: coverage report -m
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: .coverage
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    - name: Build executable
      run: pyinstaller --onefile run_game.py --name wordle
    - name: Rename binary for OS
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          mv dist/wordle.exe wordle-windows.exe
        elif [ "${{ runner.os }}" = "macOS" ]; then
          mv dist/wordle wordle-mac
        else
          mv dist/wordle wordle-linux
        fi
      shell: bash
    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: wordle-${{ runner.os }}
        path: wordle-*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all binary artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/wordle-linux
        asset_name: wordle-linux
        asset_content_type: application/octet-stream

    - name: Upload macOS binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/wordle-mac
        asset_name: wordle-mac
        asset_content_type: application/octet-stream

    - name: Upload Windows binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/wordle-windows.exe
        asset_name: wordle-windows.exe
        asset_content_type: application/octet-stream
